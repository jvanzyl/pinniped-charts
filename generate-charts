#!/usr/bin/env bash

# -------------------------------------------------------------------------------------------------
# To be clear, this shell script is grotesque. It's useful for trying to produce Helm charts from 
# the Pinniped ytt resources and if it ends up being used repeatedly as the means to generate the
# charts I'll clean it up. If I end up taking a generated version and carry on updating it 
# independently of the ytt resources then it can be tossed so I'm not spending 
# a lot of time on elegance here.
# -------------------------------------------------------------------------------------------------
# ytt uber manifest:  ytt+values
# ytt manifests: kubectl-splice of ytt uber manifest
# helm templates: ytt manifests + mutation
# helm manifests: helm templates + values
# dyff of ytt manifests vs helm manifests: they should be canonically identical

pinnipedVersion="$(git --git-dir ../pinniped/.git describe --tags | sed 's/^v//')"
chartVersion="0.0.9"
basedir=${PWD}
target="${basedir}/target"
source="${basedir}/source"
charts="${basedir}/charts"
common="${source}/common"
templatesYtt="templates.ytt"
templatesRendered="templates.helm"

[ ! -d ../pinniped ] && echo && echo "You must have pinniped checked out in ../pinniped. Clone https://github.com/vmware-tanzu/pinniped.git into ../pinniped and try again." && echo && exit

kubesplit="kubectl-slice"
yq="yq"
ytt="ytt"

[ -d ${target} ] && rm -rf ${target} && mkdir -p ${target}
[ -d ${charts} ] && rm -rf ${charts}

# -------------------------------------------------------------------------------------------------
# Local User Authenticator
# -------------------------------------------------------------------------------------------------
echo
echo "--------------------------------------------------------------------------------------------"
echo "Generating pinniped-local-user-authenticator chart"
echo "--------------------------------------------------------------------------------------------"
echo

localUserAuthenticator="pinniped-local-user-authenticator"
localUserAuthenticatorFile="install-local-user-authenticator.yaml"
localUserAuthenticatorDeployment="deployment-local-user-authenticator.yaml"
localUserAuthenticatorNamespace="local-user-authenticator"
mkdir -p ${target}/${localUserAuthenticator}
# Generate the uber manifest from the pinniped/deploy/local-user-authenticator directory
uberYtt="${target}/${localUserAuthenticatorFile}"
echo ">>> Rendering ytt templates for ${localUserAuthenticator} ..."
${ytt} --file ../pinniped/deploy/local-user-authenticator > ${uberYtt}
# Split the uber manifest
echo ">>> Splitting ytt templates for ${localUserAuthenticator} ..."
${kubesplit} --input-file=${uberYtt} --output-dir=${charts}/${localUserAuthenticator}/templates
cp -r ${source}/${localUserAuthenticator} ${charts}
${yq} eval -i ".appVersion = \"${pinnipedVersion}\"" ${charts}/${localUserAuthenticator}/Chart.yaml
${yq} eval -i ".version = \"${chartVersion}\"" ${charts}/${localUserAuthenticator}/Chart.yaml
cd ${charts}/${localUserAuthenticator}
cp ${common}/.helmignore .
rm -rf target
cp -r templates ${templatesYtt}
# Modify resources to be helm templates
cd templates
sed -e 's/@NAME@/local-user-authenticator/' ${common}/_helpers.tpl > _helpers.tpl
rm -f namespace-local-user-authenticator.yaml
for yaml in $(ls *.yaml); do
  # Remove all pinniped-concierge namespace references in resources that contain them
  ${yq} eval -i '.metadata.namespace = "{{ .Release.Namespace }}"' ${yaml}
done
# Add Go template variables in select templates
${yq} eval -i '.spec.replicas = "x{{ .Values.replicas }}x"' ${localUserAuthenticatorDeployment}
${yq} eval -i '.spec.template.spec.containers[0].image = "x{{ template \"image\" .Values.image }}x"' ${localUserAuthenticatorDeployment}
${yq} eval -i '.spec.template.spec.containers[0].imagePullPolicy = "x{{ .Values.image.pullPolicy }}x"' ${localUserAuthenticatorDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsUser = "x{{ .Values.securityContext.runAsUser }}x"' ${localUserAuthenticatorDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsGroup = "x{{ .Values.securityContext.runAsGroup }}x"' ${localUserAuthenticatorDeployment}
${yq} eval -i '.spec.template.metadata.labels.app = "x{{ include \"labels\" }}x"' ${localUserAuthenticatorDeployment}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${localUserAuthenticatorDeployment} > tmp; mv tmp ${localUserAuthenticatorDeployment}
sed -e 's/app: {{ include "labels" }}/{{ include "labels" .Values }}/' ${localUserAuthenticatorDeployment} > tmp; mv tmp ${localUserAuthenticatorDeployment}
cp ${common}/image-pull-secret.yaml .
cd ..
echo ">>> Rendering helm templates for ${localUserAuthenticator} ..."
helm template --output-dir ${templatesRendered} --namespace ${localUserAuthenticatorNamespace} .
mv ${templatesRendered}/${localUserAuthenticator}/templates/*.yaml ${templatesRendered}
rm -rf ${templatesRendered}/${localUserAuthenticator}
rm -f ${templatesYtt}/namespace*.yaml
mv ${templatesRendered} ${target}/${localUserAuthenticator}
mv ${templatesYtt} ${target}/${localUserAuthenticator}
cd ${basedir}
# -------------------------------------------------------------------------------------------------
# Concierge
# -------------------------------------------------------------------------------------------------
echo
echo "--------------------------------------------------------------------------------------------"
echo "Generating pinniped-concierge chart"
echo "--------------------------------------------------------------------------------------------"
echo

concierge="pinniped-concierge"
conciergeFile="install-pinniped-concierge.yaml"
conciergeDeployment="deployment-pinniped-concierge.yaml"
conciergeConfigMap="configmap-pinniped-concierge-config.yaml"
conciergeCredentialIssuer="credentialissuer-pinniped-concierge-config.yaml"
conciergeNamespace="${concierge}"
mkdir -p ${target}/${concierge}

# Generate the uber manifest from the pinniped/deploy/concierge directory
uberYtt="${target}/${conciergeFile}"
echo ">>> Rendering helm templates for ${concierge} ..."
${ytt} --file ../pinniped/deploy/concierge > ${uberYtt}
# Split the uber manifest
echo ">>> Splitting ytt templates for ${concierge} ..."
${kubesplit} --input-file=${uberYtt} --output-dir=${charts}/${concierge}/templates
cp -r ${source}/${concierge} ${charts}
${yq} eval -i ".appVersion = \"${pinnipedVersion}\"" ${charts}/${concierge}/Chart.yaml
${yq} eval -i ".version = \"${chartVersion}\"" ${charts}/${concierge}/Chart.yaml
mkdir ${charts}/${concierge}/crds
cd ${charts}/${concierge}
cp ${common}/.helmignore  .
rm -rf target
cp -r templates ${templatesYtt}
# Modify resources to be helm templates
cd templates
sed -e 's/@NAME@/pinniped-concierge/' ${common}/_helpers.tpl > _helpers.tpl
mv customresourcedefinition*.yaml ../crds
rm -f namespace-pinniped-concierge.yaml
for yaml in $(ls *.yaml); do
  # Remove all pinniped-concierge namespace references in resources that contain them
  ${yq} eval -i 'select(.metadata.namespace == "pinniped-concierge").metadata.namespace = "{{ .Release.Namespace }}"' ${yaml}
  ${yq} eval -i 'select(.kind == "APIService").spec.service.namespace = "{{ .Release.Namespace }}"' ${yaml}
  ${yq} eval -i '(select(.kind == "ClusterRoleBinding" or .kind == "RoleBinding").subjects[] | select(.kind == "ServiceAccount").namespace) = "{{ .Release.Namespace }}"' ${yaml}
done
# Deployment
${yq} eval -i '.spec.replicas = {{ .Values.replicas }}' ${conciergeDeployment}
${yq} eval -i '.spec.template.spec.containers[0].image = "x{{ template \"image\" .Values.image }}x"' ${conciergeDeployment}
${yq} eval -i '.spec.template.spec.containers[0].imagePullPolicy = "x{{ .Values.image.pullPolicy }}x"' ${conciergeDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsUser = "x{{ .Values.securityContext.runAsUser }}x"' ${conciergeDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsGroup = "x{{ .Values.securityContext.runAsGroup }}x"' ${conciergeDeployment}
${yq} eval -i '.spec.template.metadata.labels.app = "x{{ include \"labels\" }}x"' ${conciergeDeployment}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${conciergeDeployment} > tmp; mv tmp ${conciergeDeployment}
sed -e 's/app: {{ include "labels" }}/{{ include "labels" .Values }}/' ${conciergeDeployment} > tmp; mv tmp ${conciergeDeployment}
# ConfigMap
# The config map is a bit messy. The pinniped.yaml configuration is a string element instead of inline yaml in the released version which 
# makes it hard to read and substitute values into. This is meh, but it works.
export config="$(${yq} e '.data."pinniped.yaml"' ${conciergeConfigMap} | sed '/^[[:space:]]*$/d')"
${yq} eval -i '.data."pinniped.yaml" = env(config)' ${conciergeConfigMap}
${yq} eval -i '.data."pinniped.yaml".api.servingCertificate.durationSeconds = "x{{ .Values.config.api.servingCertificate.durationSeconds }}x"' ${conciergeConfigMap}
${yq} eval -i '.data."pinniped.yaml".api.servingCertificate.renewBeforeSeconds = "x{{ .Values.config.api.servingCertificate.renewBeforeSeconds }}x"' ${conciergeConfigMap}
${yq} eval -i '.data."pinniped.yaml".apiGroupSuffix = "x{{ .Values.config.apiGroupSuffix }}x"' ${conciergeConfigMap}
${yq} eval -i '.data."pinniped.yaml".kubeCertAgent.image = "x{{ template \"image\" .Values.image }}x"' ${conciergeConfigMap}
sed 's/pinniped.yaml\:/pinniped.yaml\: |/' ${conciergeConfigMap} > tmp; mv tmp ${conciergeConfigMap}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${conciergeConfigMap} > tmp; mv tmp ${conciergeConfigMap}
# CredentialsIssuer / ImpersonationProxy
${yq} eval -i '.spec.impersonationProxy.mode = "{{ .Values.impersonationProxy.mode }}"' ${conciergeCredentialIssuer}
${yq} eval -i '.spec.impersonationProxy.service.type = {{ .Values.impersonationProxy.service.type }}' ${conciergeCredentialIssuer}
${yq} eval -i '.spec.impersonationProxy.service.annotations = {{ .Values.impersonationProxy.service.annotations }}' ${conciergeCredentialIssuer}
cp ${common}/image-pull-secret.yaml .
cd ..
echo ">>> Rendering helm templates for ${concierge} ..."
helm --debug template --output-dir ${templatesRendered} --namespace ${conciergeNamespace} .
cp crds/*.yaml ${templatesRendered}
mv ${templatesRendered}/${concierge}/templates/*.yaml ${templatesRendered}
rm -rf ${templatesRendered}/${concierge}
rm -f ${templatesYtt}/namespace*.yaml
mv ${templatesRendered} ${target}/${concierge}
mv ${templatesYtt} ${target}/${concierge}
cd ${basedir}

# -------------------------------------------------------------------------------------------------
# Supervisor
# -------------------------------------------------------------------------------------------------
echo
echo "--------------------------------------------------------------------------------------------"
echo "Generating pinniped-supervisor chart"
echo "--------------------------------------------------------------------------------------------"
echo

supervisor="pinniped-supervisor"
supervisorFile="install-pinniped-supervisor.yaml"
supervisorDeployment="deployment-pinniped-supervisor.yaml"
supervisorConfigMap="configmap-pinniped-supervisor-static-config.yaml"
supervisorNamespace="${supervisor}"
mkdir -p ${target}/${supervisor}

# Generate the uber manifest from the pinniped/deploy/supervisor directory
cd ${source}/pinniped-supervisor
rm -rf target > /dev/null 2>&1 ; mkdir target
cp ../../../pinniped/deploy/supervisor/* target
cp values-ytt.yaml target
cd target
rm values.yaml
uberYtt="${target}/${supervisorFile}"
echo ">>> Rendering helm templates for ${supervisor} ..."
${ytt} --file . > ${uberYtt}
cd ${basedir}
# Split the uber manifest
echo ">>> Splitting ytt templates for ${supervisor} ..."
${kubesplit} --input-file=${uberYtt} --output-dir=${charts}/${supervisor}/templates
cp -r ${source}/${supervisor} ${charts}
${yq} eval -i ".appVersion = \"${pinnipedVersion}\"" ${charts}/${supervisor}/Chart.yaml
${yq} eval -i ".version = \"${chartVersion}\"" ${charts}/${supervisor}/Chart.yaml
mkdir ${charts}/${supervisor}/crds
cd ${charts}/${supervisor}
cp ${common}/.helmignore  .
rm -rf values-ytt.yaml
rm -rf target
cp -r templates ${templatesYtt}
# Modify resources to be helm templates
cd templates
sed -e 's/@NAME@/pinniped-supervisor/' ${common}/_helpers.tpl > _helpers.tpl
mv customresourcedefinition*.yaml ../crds
rm -f namespace-pinniped-supervisor.yaml
for yaml in $(ls *.yaml); do
  # Remove all pinniped-supervisor namespace references in resources that contain them
  ${yq} eval -i '.metadata.namespace = "{{ .Release.Namespace }}"' ${yaml}
  ${yq} eval -i '(select(.kind == "RoleBinding").subjects[] | select(.kind == "ServiceAccount").namespace) = "{{ .Release.Namespace }}"' ${yaml}
done
# Deployment
${yq} eval -i '.spec.replicas = {{ .Values.replicas }}' ${supervisorDeployment}
${yq} eval -i '.spec.template.spec.containers[0].image = "x{{ template \"image\" .Values.image }}x"' ${supervisorDeployment}
${yq} eval -i '.spec.template.spec.containers[0].imagePullPolicy = "x{{ .Values.image.pullPolicy }}x"' ${supervisorDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsUser = "x{{ .Values.securityContext.runAsUser }}x"' ${supervisorDeployment}
${yq} eval -i '.spec.template.spec.securityContext.runAsGroup = "x{{ .Values.securityContext.runAsGroup }}x"' ${supervisorDeployment}
${yq} eval -i '.spec.template.metadata.labels.app = "x{{ include \"labels\" }}x"' ${supervisorDeployment}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${supervisorDeployment} > tmp; mv tmp ${supervisorDeployment}
sed -e 's/app: {{ include "labels" }}/{{ include "labels" .Values }}/' ${supervisorDeployment} > tmp; mv tmp ${supervisorDeployment}
# ConfigMap
sed -e 's/pinniped.yaml: |/pinniped.yaml: /' ${supervisorConfigMap} > tmp
${yq} eval -i '.data."pinniped.yaml".apiGroupSuffix = {{ .Values.config.apiGroupSuffix }}' tmp
sed -e 's/pinniped.yaml:/pinniped.yaml: |/' tmp > ${supervisorConfigMap} 
rm tmp
#
# Service: generate a single file with the various service options which are controlled by configuration in the values.yaml
#
serviceClusterIp=service-pinniped-supervisor-clusterip.yaml
${yq} eval -i '.spec.ports[0].name = "x{{ .Values.service.clusterIP.name }}x"' ${serviceClusterIp}
${yq} eval -i '.spec.ports[0].protocol = "x{{ .Values.service.clusterIP.protocol }}x"' ${serviceClusterIp}
${yq} eval -i '.spec.ports[0].targetPort = "x{{ .Values.service.clusterIP.port }}x"' ${serviceClusterIp}
${yq} eval -i '.spec.ports[0].port = "x{{ .Values.service.clusterIP.targetPort }}x"' ${serviceClusterIp}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${serviceClusterIp} > tmp; mv tmp ${serviceClusterIp}
serviceNodePort=service-pinniped-supervisor-nodeport.yaml
${yq} eval -i '.spec.ports[0].name = "x{{ .Values.service.nodePort.name }}x"' ${serviceNodePort}
${yq} eval -i '.spec.ports[0].protocol = "x{{ .Values.service.nodePort.protocol }}x"' ${serviceNodePort}
${yq} eval -i '.spec.ports[0].targetPort = "x{{ .Values.service.nodePort.port }}x"' ${serviceNodePort}
${yq} eval -i '.spec.ports[0].port = "x{{ .Values.service.nodePort.targetPort }}x"' ${serviceNodePort}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${serviceNodePort} > tmp; mv tmp ${serviceNodePort}
serviceLoadBalancer=service-pinniped-supervisor-loadbalancer.yaml
${yq} eval -i '.spec.ports[0].name = "x{{ .Values.service.loadBalancer.name }}x"' ${serviceLoadBalancer}
${yq} eval -i '.spec.ports[0].protocol = "x{{ .Values.service.loadBalancer.protocol }}x"' ${serviceLoadBalancer}
${yq} eval -i '.spec.ports[0].targetPort = "x{{ .Values.service.loadBalancer.port }}x"' ${serviceLoadBalancer}
${yq} eval -i '.spec.ports[0].port = "x{{ .Values.service.loadBalancer.targetPort }}x"' ${serviceLoadBalancer}
sed -e 's/x{{/{{/' -e 's/}}x/}}/' ${serviceLoadBalancer} > tmp; mv tmp ${serviceLoadBalancer}
service="service-pinniped-supervisor.yaml"
${yq} eval -i '.spec.ports[0].port = {{ .Values.service.loadBalancer.port }}' ${serviceLoadBalancer}
echo '{{- if eq .Values.service.type "clusterIP" }}' > ${service}
cat ${serviceClusterIp} >> ${service}
echo '{{- else if eq .Values.service.type "nodePort" }}' >> ${service}
cat ${serviceNodePort} >> ${service}
echo '{{- else if eq .Values.service.type "loadBalancer" }}' >> ${service}
cat ${serviceLoadBalancer} >> ${service}
echo '{{- end }}' >> ${service}
#
# Test services for local integration test
#
service="test-service-pinniped-supervisor.yaml"
echo '{{- if .Values.service.test }}' > ${service}
cat ${serviceClusterIp} >> ${service}
echo '---' >> ${service}
cat ${serviceNodePort} >> ${service}
echo '{{- end }}' >> ${service}

rm ${serviceClusterIp}
rm ${serviceNodePort}
rm ${serviceLoadBalancer}
cp ${common}/image-pull-secret.yaml .
cd ..
echo ">>> Rendering helm templates for ${supervisor} ..."
helm template --output-dir ${templatesRendered} --namespace ${supervisorNamespace} .
cp crds/*.yaml ${templatesRendered}
mv ${templatesRendered}/${supervisor}/templates/*.yaml ${templatesRendered}
rm -rf ${templatesRendered}/${supervisor}
rm -f ${templatesYtt}/namespace*.yaml
mv ${templatesRendered} ${target}/${supervisor}
mv ${templatesYtt} ${target}/${supervisor}
cd ${basedir}

# -------------------------------------------------------------------------------------------------
# Helm Lint
# -------------------------------------------------------------------------------------------------
echo
helm lint ${charts}/${localUserAuthenticator}
echo
helm lint ${charts}/${concierge}
echo
helm lint ${charts}/${supervisor}

# -------------------------------------------------------------------------------------------------
# Dyff
# -------------------------------------------------------------------------------------------------
echo
echo "--------------------------------------------------------------------------------------------"
echo "Dyffing pinniped-local-user-authenticator"
echo "--------------------------------------------------------------------------------------------"
echo
cd ${target}/${localUserAuthenticator}
for file in $(ls ${templatesRendered}); do
  helm="${templatesRendered}/${file}"
  ytt="${templatesYtt}/${file}"
  dyff between ${helm} ${ytt}
done
cd -

echo
echo "--------------------------------------------------------------------------------------------"
echo "Dyffing pinniped-concierge"
echo "--------------------------------------------------------------------------------------------"
echo
cd ${target}/${concierge}
for file in $(ls ${templatesRendered}); do
  helm="${templatesRendered}/${file}"
  ytt="${templatesYtt}/${file}"
  dyff between ${helm} ${ytt}
done
cd -

echo
echo "--------------------------------------------------------------------------------------------"
echo "Dyffing pinniped-supervisor"
echo "--------------------------------------------------------------------------------------------"
echo
cd ${target}/${supervisor}
for file in $(ls ${templatesRendered}); do
  helm="${templatesRendered}/${file}"
  ytt="${templatesYtt}/${file}"
  # Account for the different in rendered file name
  if [ "${file}" = "service-pinniped-supervisor.yaml" ]; then
    dyff between ${templatesRendered}/${file} ${templatesYtt}/service-pinniped-supervisor-clusterip.yaml
  else
    dyff between ${helm} ${ytt}
  fi
done
cd -

echo
echo "If you don't see any colored diffs above, the ytt generated resources and helm generated resources are canonically identical."
echo